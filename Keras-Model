Creating Model using Padding:

def keras_model(input_shape):

    # Define the input placeholder as a tensor with shape input_shape. Think of this as your input image!
    X_input = Input(input_shape)
    
    # Zero-Padding: pads the border of X_input with zeroes
    X = ZeroPadding2D((3, 3))(X_input)
    
    # CONV -> BN -> RELU Block applied to X
    X = Conv2D(32, (7, 7), strides = (1, 1), name = 'conv0')(X)
    
    # MAXPOOL
    X = BatchNormalization(axis = 3, name = 'bn0')(X)
    
    # FLATTEN X (means convert it to a vector) + FULLYCONNECTED
    X = Activation('relu')(X)
    X = MaxPooling2D((2, 2), name='max_pool')(X)
    X = Flatten()(X)
    X = Dense(1, activation='sigmoid', name='fc')(X)
    
    # Create model. This creates your Keras model instance, you'll use this instance to train/test the model.
    model = Model(inputs = X_input, outputs = X, name='keras_model')
    

    return model
    
    Model = keras_model(X_train.shape[1:])
    
    Compiling the model:
    
    Model.compile(optimizer = "adam", loss = "binary_crossentropy", metrics = ["accuracy"])
    
    Training the model:
    
    history = Model.fit(X_train, Y_train, epochs = 100, batch_size = 40)
    
    Summarizing the model:
    
    Model.summary()
    
    
